type Global @entity {
  "There should be only one System entity with an ID of 'only'"
  id: ID!

  systemStateCount: Int!
  transactionCount: Int!
  changeCount: Int!
  liquidationCount: Int!
  redemptionCount: Int!

  numberOfOpenTroves: Int!
  numberOfLiquidatedTroves: Int!
  numberOfRedeemedTroves: Int!
  numberOfTrovesClosedByOwner: Int!
  totalNumberOfTroves: Int!

  "Total amount of ZUSD paid as borrowing fees"
  totalBorrowingFeesPaidZUSD: BigDecimal!
  "Total amount of RBTC paid as redemption fees"
  totalRedemptionFeesPaidRBTC: BigDecimal!
  "Total amount of ZUSD paid as borrowing fees converted to RBTC"
  totalBorrowingFeesPaidRBTC: BigDecimal!
  "Total amount of RBTC paid as redemption fees converted to ZUSD"
  totalRedemptionFeesPaidZUSD: BigDecimal!

  totalStabilityPoolProfits: BigDecimal!
  totalLiquidationCompensation: BigDecimal!
  totalLiquidationVolume: BigDecimal!

  "Total redistributed per-stake collateral"
  rawTotalRedistributedCollateral: BigInt!

  "Total redistributed per-stake debt"
  rawTotalRedistributedDebt: BigInt!

  # currentActivePool: ActivePool
  currentSystemState: SystemState

  "Only used internally as temporary storage. Will always be null in queries"
  currentLiquidation: Liquidation

  "Only used internally as temporary storage. Will always be null in queries"
  currentRedemption: Redemption

  "Only used internally as temporary storage. Will always be null in queries"
  tmpDepositUpdate: BigInt
}

type TempDepositUpdate @entity {
  "ID is transaction hash"
  id: ID!
  amount: BigInt
}

type SystemState @entity {
  "Sequence number as an ID (string)"
  id: ID!

  "Can be used to chronologically sort SystemStates"
  sequenceNumber: Int!

  price: BigDecimal

  totalCollateral: BigDecimal!
  totalDebt: BigDecimal!
  totalCollateralRatio: BigDecimal

  tokensInStabilityPool: BigDecimal!
  collSurplusPoolBalance: BigDecimal!

  cause: Change @derivedFrom(field: "systemStateAfter")
}

type User @entity {
  "User's Ethereum address as a hex-string"
  id: ID!

  trove: Trove
  stabilityDeposit: StabilityDeposit
  # frontend: Frontend

  collSurplus: BigDecimal!
  collSurplusChanges: [CollSurplusChange!]! @derivedFrom(field: "user")

  liquidations: [Liquidation!]! @derivedFrom(field: "liquidator")
  redemptions: [Redemption!]! @derivedFrom(field: "redeemer")

  balances: [TokenBalance!] @derivedFrom(field: "owner")
  allowances: [TokenAllowance!] @derivedFrom(field: "owner")
}

enum TroveStatus {
  open
  closedByOwner
  closedByLiquidation
  closedByRedemption
}

type Trove @entity {
  "Owner's ID"
  id: ID!

  owner: User!
  status: TroveStatus!

  collateral: BigDecimal!
  debt: BigDecimal!

  changes: [TroveChange!]! @derivedFrom(field: "trove")

  rawCollateral: BigInt!
  rawDebt: BigInt!
  rawStake: BigInt!

  "The value of total redistributed per-stake collateral the last time rewards were applied"
  rawSnapshotOfTotalRedistributedCollateral: BigInt!

  "The value of total redistributed per-stake debt the last time rewards were applied"
  rawSnapshotOfTotalRedistributedDebt: BigInt!

  "Ordering by this field will result in the same ordering as collateral ratio (except reversed)"
  collateralRatioSortKey: BigInt
}

type StabilityDeposit @entity {
  "Owner's ID + '-' + an incremented integer"
  id: ID!

  owner: User!

  depositedAmount: BigDecimal!

  currentSnapshot: Snapshot

  # frontend: Frontend

  changes: [StabilityDepositChange!]! @derivedFrom(field: "stabilityDeposit")
}

type Transaction @entity {
  "Transaction hash"
  id: ID!

  "Can be used to correctly sort transactions even if they were mined in the same block"
  sequenceNumber: Int!

  blockNumber: Int!
  """
  The timestamp the transaction was confirmed
  """
  timestamp: Int!

  gasPrice: BigInt!
  """
  The index of this transaction within the block
  """
  index: Int!
  """
  The account that initiated this transaction. This must be an Account and not a Contract.
  """
  from: Bytes!
  """
  The contract the user interacted with
  """
  to: Bytes
  value: BigInt!
  gasLimit: BigInt!
  gasUsed: BigInt
  functionSignature: String!

  changes: [Change!]! @derivedFrom(field: "transaction")
}

interface Change {
  "Same as sequence number, but as an ID (string)"
  id: ID!

  "Can be used to correctly sort changes even if they were made by the same transaction"
  sequenceNumber: Int!

  "Transaction that made this change"
  transaction: Transaction!

  systemStateBefore: SystemState!
  systemStateAfter: SystemState
}

enum TroveOperation {
  openTrove
  closeTrove
  adjustTrove
  transferGainToLineOfCredit
  accrueRewards
  liquidateInNormalMode
  liquidateInRecoveryMode
  redeemCollateral
}

type TroveChange implements Change @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  systemStateBefore: SystemState!
  systemStateAfter: SystemState

  trove: Trove!
  troveOperation: TroveOperation!

  collateralBefore: BigDecimal!
  collateralChange: BigDecimal!
  collateralAfter: BigDecimal!

  debtBefore: BigDecimal!
  debtChange: BigDecimal!
  debtAfter: BigDecimal!

  borrowingFee: BigDecimal

  collateralRatioBefore: BigDecimal
  collateralRatioAfter: BigDecimal

  liquidation: Liquidation
  redemption: Redemption
}

enum StabilityDepositOperation {
  depositTokens
  withdrawTokens
  withdrawCollateralGain
  withdrawGainToLineOfCredit
}

type StabilityDepositChange implements Change @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  systemStateBefore: SystemState!
  systemStateAfter: SystemState

  stabilityDeposit: StabilityDeposit!
  stabilityDepositOperation: StabilityDepositOperation!

  depositedAmountBefore: BigDecimal!
  depositedAmountChange: BigDecimal!
  depositedAmountAfter: BigDecimal!

  collateralGain: BigDecimal
}

type PriceChange implements Change @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  systemStateBefore: SystemState!
  systemStateAfter: SystemState

  priceChange: BigDecimal!
}

type Liquidation @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  liquidator: User!

  liquidatedDebt: BigDecimal!
  liquidatedCollateral: BigDecimal!
  collGasCompensation: BigDecimal!
  tokenGasCompensation: BigDecimal!

  troveChanges: [TroveChange!]! @derivedFrom(field: "liquidation")
}

type Redemption @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  redeemer: User!

  tokensAttemptedToRedeem: BigDecimal!
  tokensActuallyRedeemed: BigDecimal!
  collateralRedeemed: BigDecimal!
  partial: Boolean!

  fee: BigDecimal!

  troveChanges: [TroveChange!]! @derivedFrom(field: "redemption")
}

# This event is here for debugging purposes only
type RedemptionRaw @entity {
  id: ID!
  _attemptedZUSDAmount: BigInt!
  _actualZUSDAmount: BigInt!
  _RBTCSent: BigInt!
  _RBTCFee: BigInt!
}

type CollSurplusChange implements Change @entity {
  id: ID!
  sequenceNumber: Int!
  transaction: Transaction!
  systemStateBefore: SystemState!
  systemStateAfter: SystemState

  user: User!

  collSurplusBefore: BigDecimal!
  collSurplusChange: BigDecimal!
  collSurplusAfter: BigDecimal!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  balances: [TokenBalance!] @derivedFrom(field: "token")
  allowances: [TokenAllowance!] @derivedFrom(field: "token")
}

type TokenBalance @entity {
  id: ID!
  token: Token!
  owner: User!
  balance: BigInt!
}

type TokenAllowance @entity {
  id: ID!
  token: Token!
  owner: User!
  spender: User!
  value: BigInt!
}

# type Frontend @entity {
#   id: ID!
#   owner: User!
#   kickbackRate: BigDecimal!
#   deposits: [StabilityDeposit!]! @derivedFrom(field: "frontend")
# }

type RevenueDaily @entity {
  id: ID! # Unix timestamp as string
  borrowFeeZUSD: BigDecimal!
  redemptionFeeZUSD: BigDecimal!
  borrowFeeRBTC: BigDecimal!
  redemptionFeeRBTC: BigDecimal!
  """
  Stability Pool profit is the sum of profits accrued to the SP in the given time period; 
  each profit event is calculated at the time of each liquidation transaction as: 
  amount of RBTC collateral sent to the SP at the time of the liquidation - (amount of ZUSD taken from the SP to service the liquidation / USD price of RBTC at the time of the liquidation)
  """
  stabilityPoolProfit: BigDecimal!
  """
  Liquidation volume is the total amount of RBTC collateral liquidated in the given time period. 
  """
  liquidationVolume: BigDecimal!
  """
  The liquidation compensation is equal to 0.5% of the RBTC collateral liquidated in a given time period.
  """
  liquidationCompensation: BigDecimal!
  periodStartUnix: BigInt!
}

type RevenueWeekly @entity {
  id: ID! # Unix timestamp as string
  borrowFeeZUSD: BigDecimal!
  redemptionFeeZUSD: BigDecimal!
  borrowFeeRBTC: BigDecimal!
  redemptionFeeRBTC: BigDecimal!
  """
  Stability Pool profit is the sum of profits accrued to the SP in the given time period; 
  each profit event is calculated at the time of each liquidation transaction as: 
  (USD price of RBTC at the time of the liquidation / amount of RBTC collateral sent to the SP at the time of the liquidation) - (amount of ZUSD taken from the SP to service the liquidation / USD price of RBTC at the time of the liquidation)
  """
  stabilityPoolProfit: BigDecimal!
  """
  Liquidation volume is the total amount of RBTC collateral liquidated in the given time period. 
  """
  liquidationVolume: BigDecimal!
  """
  The liquidation compensation is equal to 0.5% of the RBTC collateral liquidated in a given time period.
  """
  liquidationCompensation: BigDecimal!
  periodStartUnix: BigInt!
}

type StabilityDepositVariable @entity {
  id: ID!
  _S: BigInt!
  _P: BigInt!
  _G: BigInt!
  epoch: BigInt!
  scale: BigInt!
  sumS: BigInt!
  blockNumber: Int!
  systemStateSequenceNumber: Int!
}

type Snapshot @entity {
  id: ID!
  depositor: StabilityDeposit!
  _P: BigInt!
  _S: BigInt!
  _G: BigInt!
  timestamp: Int!
  blockNumber: Int!
  systemStateSequenceNumber: Int!
}